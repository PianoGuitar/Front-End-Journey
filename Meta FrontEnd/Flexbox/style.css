* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.box {
  background-color: cornflowerblue;
  border-radius: 5px;
  margin: 2px;
  padding: 10px;
}

.flex-container {
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  font-size: 20px;
  background-color: rgb(201, 201, 201);
  margin: 40px;

  /* ***FLEX-BOX*** */
  display: flex;
  justify-content: flex-end;
  flex-wrap: wrap;
  flex-direction: column;
  align-items: flex-end;
  gap: 20px;
}

.box3,
.box5 {
  background-color: coral;
  align-self: flex-start;
}

.box5 {
  flex: 1 1 auto;
}

.box7 {
  background-color: aquamarine;
  height: 250px;
}

/* ************************************ */
/* justify-content:
  This property is used to align flex items along the main axis (horizontally in a row or vertically in a column). It defines how extra space should be distributed among flex items or how they should be aligned when there is extra space available. The values for justify-content include: flex-start (aligns items to the start of the main axis), flex-end (aligns items to the end of the main axis), center (aligns items to the center of the main axis), space-between (distributes space between items with equal gaps), space-around (distributes space around items with equal gaps), and space-evenly (distributes space evenly between items, including at the start and end).

  align-items:
  This property is used to align flex items along the cross axis (vertically in a row or horizontally in a column). It defines how flex items should be aligned within their flex container. The values for align-items include: flex-start (aligns items to the start of the cross axis), flex-end (aligns items to the end of the cross axis), center (aligns items to the center of the cross axis), baseline (aligns items to their baselines), and stretch (stretches items to fill the cross axis).

  align-self:
  This property is used to override the align-items property on individual flex items. It allows you to specify how a specific flex item should be aligned along the cross axis, independently of other items in the same flex container. The values for align-self are the same as align-items.

  align-content:
  This property is used to control the alignment of flex lines (when there are multiple rows or columns of flex items) along the cross axis. It defines how flex lines should be aligned within their flex container. The values for align-content include: flex-start (aligns lines to the start of the cross axis), flex-end (aligns lines to the end of the cross axis), center (aligns lines to the center of the cross axis), space-between (distributes space between lines with equal gaps), space-around (distributes space around lines with equal gaps), and stretch (stretches lines to fill the cross axis). 
  
  
  gap property:
  can be used to create space between the items along the main axis. You can also individually configure the gaps in rows and columns using row-gap and column-gap properties.   */

/* *****  NAVIGATION  ***** */

.navigation {
  display: flex;
  flex-flow: row wrap;
  justify-content: stretch;
  margin: 1vh 0;
  background-color: darkslateblue;
}

.navigation li {
  list-style-type: none;
}

.nav {
  padding: 1rem;
  font-family: "Courier New", Courier, monospace;
  font-size: 2rem;
  font-weight: 600;
  background-color: darkslateblue;
  color: #ffffffec;
}

.nav a:link {
  text-decoration: none;
  color: #ffffffec;
}

.nav a:active {
  color: darkslateblue;
}

.nav:hover {
  background-color: #d4d4d4ec;
}

.nav a:visited {
  color: #ffffffec;
}

.nav:last-child {
  margin-right: 0;
}

/* *****  SEARCH Navigation  ***** */

.search-bar-nav {
  display: inline-flex;
  flex: 1 1 300px;
  overflow: hidden;
}

.searchBox-nav {
  padding: 1rem;
  font-size: 1.25rem;
  border: none;
  outline: none;
  flex: 1; /* Fill remaining space within .search-bar */
}

.search-icon {
  display: flex;
  align-items: center;
  padding: 1rem;
  background-color: #ffffffec;
}

.search-icon svg {
  fill: darkslateblue;
  width: 1.5rem;
  height: 1.5rem;
}

.searchBox::placeholder {
  /* Set initial placeholder opacity to 1 */
  opacity: 1;
}

.searchBox:focus::placeholder {
  /* Hide placeholder on focus */
  opacity: 0;
}

.searchbtn-nav {
  padding: 1rem;
  border: 0;
  background-color: rgb(0, 75, 136);
  color: #ffffffec;
  font-size: 1.25rem;
  cursor: pointer;
}

.searchbtn:hover {
  background-color: rgb(0, 95, 173);
}

.searchbtn:active {
  background-color: rgb(0, 75, 136);
}

/* *****  SEARCH BAR  ***** */

.search-bar {
  display: inline-flex;
  /* flex: 1 1 300px; */
  margin: 2rem auto;
  /* border: 0.15rem solid #d4d4d4ec; */
  border-radius: 1rem;
  /* width: 50vw; */
  /* width: 50%; */
  overflow: hidden;
  /* Có hai giá trị chính của thuộc tính overflow là hidden và scroll. Giá trị hidden sẽ dấu đi nội dung vượt quá phần tử cha và giá trị scroll sẽ hiển thị thanh cuộn để người dùng có thể cuộn để xem nội dung */
}

.searchBox {
  padding: 1rem;
  font-size: 1.25rem;
  border: none;
  outline: none;
  /* width: 100%; */
  flex: 1; /* Fill remaining space within .search-bar */
}

.search-icon {
  display: flex;
  align-items: center;
  padding: 1rem;
  background-color: #ffffffec;
}

.search-icon svg {
  fill: darkslateblue;
  width: 1.5rem;
  height: 1.5rem;
}

.searchBox::placeholder {
  /* Set initial placeholder opacity to 1 */
  opacity: 1;
}

.searchBox:focus::placeholder {
  /* Hide placeholder on focus */
  opacity: 0;
}

.searchbtn {
  padding: 1rem;
  border: 0;
  background-color: rgb(0, 75, 136);
  color: #ffffffec;
  font-size: 1.25rem;
  cursor: pointer;
}

.searchbtn:hover {
  background-color: rgb(0, 95, 173);
}

.searchbtn:active {
  background-color: rgb(0, 75, 136);
}

/* *****  GALLERY  ***** */

.gallery {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 1rem;
  margin: 2rem;
}

.img img {
  width: 100%;
  margin: 1rem;
  border: none;
}

/* @media (min-width: 768px) {
  .gallery {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
} */
